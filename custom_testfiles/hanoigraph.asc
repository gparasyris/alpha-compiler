/*
    TOWERS OF HANOI
    C RECURSION TUTORIAL
    PART 3
*/

/*
    DECLARATIONS
*/

EMPTY = 0 ; /*  Empty disk position.  */
DISKS = 0; /*  Number of disks.  */
    /*
if(typeof(DISKS)!="integer_vm"){
    while(true){
        print("Type an integer\n");
        DISKS=input()
        if(typeof(DISKS)=="integer_vm")break;
    }
}*/

HEADER = "\n\n  TOWERS OF HANOI\n 
  -ALPHA VERSION-\n\n 
      \n";
    

/*
    GLOBAL VARIABLES
*/
    
temp=[];
pos=[[],[],[]];

function initialize (){
    for (place=0;place<DISKS+1;place++ ){
        pos[0][place]=tablecopy(temp);
        pos[1][place]=tablecopy(temp);
        pos[2][place]=tablecopy(temp);
    }
}




 /*  Disk position array, [rows][columns].  */

code = ["A", "B", "C"];  /*  Tower names.  */


/*
    FUNCTION PROTOTYPES
*/

function moveDisk(  source,  destination )
{
   // print("\n",source," ",destination,"\n");
     i = 0;
     j = 0;

    /*  Determine source location.  */
    while( pos[ source ][ i ] == EMPTY )
    {
        i++;
    }

    /*  Determine destination location.  */
    while(( pos[ destination ][ j ] == EMPTY ) and ( j < DISKS ))
    {

        j++;
        //print(" bika while",j,"\n");
    }
    // print(" eksw apo  while",j,"\n");
    //j = j- 1;
    //  print(" meta ti meiwsi",j,"\n");
    /*  Move disk.  */
   print( "\n  Move disk #" , pos[ source ][ i ] ," from ", code[ source ]," to ", code[ destination ],":\n\n");
    
    pos[ destination ][ j-1 ] = pos[ source ][ i ];
    pos[ source ][ i ] = EMPTY;

    /*  Print disk positions after move.  */
    print( "\n\n          A B C\n" );
    print( "          - - -\n" );

    for( j = 0; j < DISKS; ++j )
    {
        print("          ", pos[ 0 ][ j ]," ", pos[ 1 ][ j ]," ", pos[ 2 ][ j ],"\n" );
    }
    print( "\n" );

    return;
}

//              Disks   0         1              2 
function towers(  n,  source,  temporary,  destination )
{
   
    if ( n == 1 )  /*  Base case.  */
    {
        moveDisk( source, destination );
    }else  
    {
       
        towers( n - 1, source, destination, temporary );
        moveDisk( source, destination );
        towers( n - 1, temporary, source, destination );
    }

    return;
}




// 4.4 * )

function main()
{
     i = 0;
     j = 0;
     hold = 0;

    print( HEADER );
    print(towers);
    print("\nType the number of Disks: ");
    DISKS=input();
   // check=  ;
    //print("\n",check,"\n");
    //x=input();
    while(true){
        if((typeof(DISKS)!= "number") or  (DISKS%1)){
        print("\nInput was not an integer, try again:");
        DISKS=input();
        continue;
        }
        else if((typeof(DISKS)== "number") and  (DISKS>(DISKS%(2*DISKS)))){
        print("\nInput was not an integer, try again:");
        DISKS=input();
        }
        else break;  

    }

    initialize();
    print( "\n\n  The Towers of Hanoi: ", DISKS ," Disks\n\n"  );

    //  Initialize disk positions.  
    for( i = 0; i < 3; ++i )
    {
        for( j = 0; j < DISKS; ++j )
        {
            if( i == 0 )
            {
                pos[ i ][ j ] = j + 1;
            }else
            {
                pos[ i ][ j ] = EMPTY;
            }
        }
    }

    //  Print initial disk positions.  
    print( "\n\n          A B C\n" );
    print( "          - - -\n" );

    for( j = 0; j < DISKS; ++j )
    {
        //printf( "%11.1d %d %d\n", pos[ 0 ][ j ], pos[ 1 ][ j ], pos[ 2 ][ j ] );
        print("          ", pos[ 0 ][ j ]," ", pos[ 1 ][ j ]," ", pos[ 2 ][ j ],"\n" );
    }
   // print("for out");
    print( "\n\n" );
    
    towers( DISKS, 0, 1, 2 );

    print( "\n\n#### End of Towers of Hanoi #### \n" );

    return 0;
}
   
/*
    FUNCTION DEFINITIONS
*/





main();